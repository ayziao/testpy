■メモ
●問え

●アプリの目的は？ めっちゃ個人向けデータ蓄積システム
---------------
個人向けだけどwebサービスとして複数ユーザ扱えるようにする
ユーザは複数サイトを持てる
ユーザはエントリをたくさん投稿できる
	ブログ的なの
	wiki的なの
	カレンダー
	ブックマーク
外部データを取り込んでいろいろする
	ブックマークのキャッシュ
	パクリ
	更新チェック


●メモをどのように使うか？
	ドキュメントに移動してないもの
	決定事項はドキュメントへ
	タスクは//TODOで該当テストへ
	コードがないTODOはmain.phpへ


■未分類
●コンテンツ表示と操作
操作内でコンテンツを使うとき読む
コンテンツ使わない操作でpath指定されたらどうするか？
	エラー？＞No
	無視？＞jsonとか？ jsonの場合はコンテンツのツリーと操作に対応するオブジェクトのツリーを持たしたらいい？
	コンテンツを表示して操作Windowを出す？＞htmlの時くらい？



●エンティティ
モデルとは別にエンティティ
エンティティスーパークラス
	辞書でもプロパティでもアクセスできる
	1レコード単純操作 作成 更新 プライマリキーでの取得
	全件取得 datetimeがあれば新しい方から ページ送り機能組み込み
	JSON化
エンティティサブクラスはDBから自動生成
	sqliteのcreate文
	はじめのうちは単体テスト作るけどいずれ作るのやめること想定して設計すべしというか自動生成したあと触んな

エンティティはテーブルと一対一
ユーザ ユーザアイテム みたいなツリー構造はモデルでなんとかする


複雑なSQLばモデル側に持たせる
DDLのマイグレーション
	ソースに混ぜる
	コミット前にDDL変化してないかチェク
	変化分を自動的にスクリプト化？
		ひとまず手作業
	デプロイフロー
		増加DDLはプログラム配布前に実行
		減少DDLはプログラム配布後に実行


●考
基本モジュールで作ってインスタンス化が必要になったらクラス化する
セッションクラス作る？
ユーザー作るたびにデータベースそのものを作ってしまうかどうか

●アプリケーション階層
ユーザーが直接触る部分 UI View HTML
外側から見た塊 コントローラ
アプリケーションのキモ モデル ドメイン ビジネスロジック エンティティ
ストレージ ORマッパ

●データとは？
生データ
コマンド
「タグ」というページにはタグ一覧を取得するコマンドと取得したデータをDOM組み立てするJS 生データは空？


●プラグインか？組み込みか？
外部データ/URI
外部データ/お気に入り登録
外部データ/ページ読み込み

タスク/登録
タスク/完了
タスク/完了次回登録
タスク/却下


●組み込み
サイト/作成
サイト/削除


●プラグイン
マルチポスト/twitter
マルチポスト/ブログ
マルチポスト/フリッカー
マルチポスト/はてな D B F
マルチポスト/たんぶら
マルチポスト/ミニブログ
マルチポスト/youtube
マルチポスト/ソーシャルブックマーク
マルチポスト/アンテナ
マルチポスト/フィード
マルチポスト/gyazo
マルチポスト/Googleカレンダー


●URIは？リクエストの形式は？
ユーザ名.ドメイン/パス?名前空間/クラス.メソッド={json}
URL path メソッド 引数 引数 引数
アプリ データ メソッド 引数 引数 引数…

/mogemoge.html?hoge/piyo.muge=%7B%22fegege%22%3A%22ge%26gee%22%7D
/pageTitle.html
/pageID.html

/2013?timeline
/?account.login
/?plugin/twitter.timeline
/?plugin/twitter.usertimeline
/?post

/名前空間がpluginで始まってたらプラグインフォルダからインポート
	URLにはpluginという文字列は入れないで組み込みコントローラ探して無ければプラグインフォルダを探すようにすべきか？

/パス.出力形式?名前空間/クラス.メソッド={json}
	ページを組み立てて処理して返す
/パス.出力形式#名前空間/クラス.メソッド={json}
	ページのJSから /?名前空間/クラス.メソッド={json} をリクエスト してページをDOM操作

/?名前空間/クラス.メソッド={json,パス}
	名前空間/クラス が省略されていた場合 dataコントローラとして呼び出す


ドメイン/ユーザ/いろいろ
ユーザ.ドメイン/いろいろ


●処理順は？
#			モデル取得
#			ビュー実行
#				サブリクエスト組み立て
#				リクエストプッシュ
#				アプリ実行

●出力形式は？
HTMLドキュメント
HTML部分
JSON
RAWデータ(テキスト、画像、その他バイナリファイル)


●サイト作成でできることは？
サイト名決めれる
複数作れる


●エントリ周りは？
タイトル タグ 本文 で投稿
タイトルと同じ文字列はリンクになる(jsであとから)
エントリは時刻を元にIDふられる サイトURLとエントリのIDで一意なアレとする
タイトルをつけたエントリは自動的にwiki的なものになる
タグを変更


●外部に対するやることは？
URL単位でコンテンツ取得
ページにタイトルあるっぽければwikiに取り込む


■ユースケースは？
●タグ編集
ベースデータ更新
タグリスト更新

●プラグイン パッシブ 短文投稿
直接投稿して失敗したらキューに積む？
マイクロブログクロスポストキューへ積む
ベースデータにキュー積んだフラグ

マイクロブログポストキュー起動
マイクロブログへ投稿
ベースデータに完了フラグ

●プラグイン パッシブ 長文投稿
直接投稿して失敗したらキューに積む？

ブログサービスへ投稿
サマリーをマイクロブログへ投稿
	または分割して全文マイクロブログへ投稿



■プラグイン名前空間考
ドメイン/アプリ名/いろいろ
ドメイン/アプリ名/プラグイン/プラグイン作者ドメイン/プラグイン名/いろいろ
プラグイン作者ドメイン/アプリ名/プラグイン名/いろいろ


■実装メモ
まずは高速化は一切考えない
未来の自分が読みやすいであろうコードを書く
ガード節を先に書いて 正常処理をコンパクトに


■アプリケーション仕様
タグは半角スペース区切りで入力



■参考
●IDEのテンプレートの変数とか
http://www.jetbrains.com/idea/webhelp/file-and-code-templates.html
●テンプレートを便利に
http://d.hatena.ne.jp/absj31/20130318/1363619322
●科学技術計算
http://turbare.net/transl/scipy-lecture-notes/intro/
●辞書をプロパティ風にアクセス
http://d.hatena.ne.jp/karasuyamatengu/20120408/1333862237
http://blog.livedoor.jp/odaxsen/archives/1560650.html

●インポート
別ディレクトリにあるファイルのインポート
http://kannokanno.hatenablog.com/entry/20130503/1367571825
パッケージ
http://docs.python.jp/2.5/tut/node8.html
動的
http://d.hatena.ne.jp/themorthem/20110125/1295937346
http://boli.boo.jp/boli_wiki/index.php?%E9%80%86%E5%BC%95%E3%81%8DPython%E3%83%A1%E3%83%A2%2F%E5%8B%95%E7%9A%84%E3%81%AB%E3%83%A2%E3%82%B8%E3%83%A5%E3%83%BC%E3%83%AB%E3%82%92import%E3%81%99%E3%82%8B
インポートされるモジュールを変更する
http://d.hatena.ne.jp/nullpobug/20081109/1226223232

●URI クエリ
http://koseki.hatenablog.com/entry/20120212/uricolon

■
{
	'CONTENT_LENGTH': '',
	'CONTENT_TYPE': 'text/plain',
	'GATEWAY_INTERFACE': 'CGI/1.1',
	'HOME': '/Users/user',
	'HTTP_ACCEPT': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
	'HTTP_ACCEPT_ENCODING': 'gzip,deflate,sdch',
	'HTTP_ACCEPT_LANGUAGE': 'ja,en-US;q=0.8,en;q=0.6',
	'HTTP_CACHE_CONTROL': 'max-age=0',
	'HTTP_CONNECTION': 'keep-alive',
	'HTTP_HOST': 'localhost:8080',
	'HTTP_USER_AGENT': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_8_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/31.0.1650.0 Safari/537.36',
	'PATH': '/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin:/usr/local/mysql/bin',
	'PATH_INFO': '/',
	'PYCHARM_HOSTED': '1',
	'PYTHONIOENCODING': 'UTF-8',
	'PYTHONPATH': '/usr/local/bin/python3:/Users/user/PycharmProjects/testpy/myapp',
	'PYTHONUNBUFFERED': '1',
	'QUERY_STRING': '',
	'REMOTE_ADDR': '127.0.0.1',
	'REMOTE_HOST': '',
	'REQUEST_METHOD': 'GET',
	'SCRIPT_NAME': '',
	'SERVER_NAME': 'localhost',
	'SERVER_PORT': '8080',
	'SERVER_PROTOCOL': 'HTTP/1.1',
	'SERVER_SOFTWARE': 'WSGIServer/0.2',
	'SHELL': '/bin/bash',
	'SSH_AUTH_SOCK': '/tmp/launch-LHtUCj/Listeners',
	'TMPDIR': '/var/tmp/',
	'USER': 'user',
	'__CF_USER_TEXT_ENCODING': '0x1F6:1:14',
	'__PYVENV_LAUNCHER__': '/Library/Frameworks/Python.framework/Versions/3.3/bin/python3',
	'wsgi.errors': <_io.TextIOWrapper name='<stderr>' mode='w' encoding='UTF-8'>,
	'wsgi.file_wrapper': <class 'wsgiref.util.FileWrapper'>,
	'wsgi.input': <_io.BufferedReader name=6>,
	'wsgi.multiprocess': False,
	'wsgi.multithread': True,
	'wsgi.run_once': False,
	'wsgi.url_scheme': 'http',
	'wsgi.version': (1, 0)
}