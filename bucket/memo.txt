■メモ
●メモの使い方
	ドキュメントに移動してないもの
	決定事項はドキュメントへ
	タスクは//TODOで該当テストへ
	コードがないTODOはmain.phpへ

■未分類
●URI
/mogemoge.html?hoge/piyo.muge=%7B%22fegege%22%3A%22ge%26gee%22%7D

/パス.出力形式?名前空間/クラス.メソッド={json}

/名前空間/クラス が省略されていた場合 dataモデルとして呼び出す

/名前空間がpluginで始まってたらプラグインフォルダからインポート

/パス.出力形式#名前空間/クラス.メソッド={json}

/?名前空間/クラス.メソッド={json,パス}

●
アプリケーション
	メインリクエスト取得
	リクエスト組み立て
	リクエストプッシュ
	アプリ実行
		コントローラ選択
		コントローラ実行
			モデル取得
			ビュー実行
				サブリクエスト組み立て
				リクエストプッシュ
				アプリ実行

●出力形式
HTMLドキュメント
HTML部分
JSON
RAWデータ(テキスト、画像、その他バイナリファイル)




■ディレクトリ構成考
アプリフォルダ 設置時にいじらない 1ファイルアーカイブ化できるならしたい
プラグイン プラグイン入れるとこ
ライブラリ OS組み込みじゃないのとか
コンフィグフォルダ 設置時に書く DB接続情報とか
ドキュメントルート webサーバの公開領域におく

テスト 本番には設置不要？

ドキュメント 設置不要

●アプリフォルダ以下ディレクトリ構成
共通
M ORマップは他に持つ？
V テンプレート組み込んで返したり JSON組み立てたり
C アクション受け取る
T DOMでやってテンプレートファイル持たない？

●プラグインディレクトリ構成
前処理ようのなんか
プラグイン作者ドメイン/プラグイン名/[共通,m,v,c,t]

■めっちゃ個人向けデータ蓄積システム
個人向けだけどwebサービスとして複数ユーザ扱えるようにする
ユーザは複数サイトを持てる
ユーザはエントリをたくさん投稿できる
外部データを取り込んでいろいろする

●ユーザ管理
メールアドレスとパスワードでユーザ管理 ユーザ名は登録できるべきか？
めっちゃ個人向けなので1サイトを複数ユーザで更新はしない
●サイト作成
サイト名決めれる
複数作れる
●エントリ周り
タイトル タグ 本文 で投稿
タイトルと同じ文字列はリンクになる(jsであとから)
エントリは時刻を元にIDふられる サイトURLとエントリのIDで一意なアレとする
タイトルをつけたエントリは自動的にwiki的なものになる
タグを変更
●外部
URL単位でコンテンツ取得
ページにタイトルあるっぽければwikiに取り込む

■ユースケース
●短文投稿
タイトル無し タグ無し 短文投稿
ベースデータへ登録
投稿完了をflash
タイムラインへ登録
パッシブプラグインフック

●長文投稿
タイトルあり タグあり 長文投稿
	タイトル欄なしモードの時は本文1行目をタイトルにする
ベースデータへ登録
投稿完了をflash
タイムラインへ登録
表示用データ更新or登録
タイトルリスト更新or登録
タグリスト更新or登録

パッシブプラグインフック

●タグ編集
ベースデータ更新
タグリスト更新

●プラグイン パッシブ 短文投稿
直接投稿して失敗したらキューに積む？
マイクロブログクロスポストキューへ積む
ベースデータにキュー積んだフラグ

マイクロブログポストキュー起動
マイクロブログへ投稿
ベースデータに完了フラグ

●プラグイン パッシブ 長文投稿
直接投稿して失敗したらキューに積む？

ブログサービスへ投稿
サマリーをマイクロブログへ投稿
	または分割して全文マイクロブログへ投稿


■方針 絶対的に個人

システムデータベース
	キーバリュー
	アカウント
		ユーザ名
		メールアドレス
		パスワード
ユーザデータベース
	キーバリュー
	データ
		ベースデータ
			ID
			タイトル
			本文
			タグ
			システムタグ？
		表示
			ID
			タイトル
			加工済み本文
		管理用データ
			ID
			タイトル
			本文
		タグ_データ
			タグ
			データID
		タイトル_データ
			タイトル
			データID
		全文検索用
		外部データリレーション？
外部データ
	ID
	URL
	タイトル
	本文

システムプラグイン
	有効なプラグインリスト


ユーザープラグイン（大体はキーバリューテーブルにjsonで入れる）
	外部サイト投稿設定

■クエリ
ユーザ名.ドメイン/パス?名前空間/クラス.メソッド={json}
URL path メソッド 引数 引数 引数
アプリ データ メソッド 引数 引数 引数…


■考
singletonにするかクラスメソッドのままにするか＞なるべくインスタンス化する
抽象化が必要になった時Singletonに書き換えれば良い？＞基本インスタンス化して クラスメンバの方を必要なときに使う
webServer と CUI のクラスを実行環境クラスとして抽象化する？>とりあえず削除
セッションクラス作る？
実行環境クラスがアプリケーションクラスへアクセスしてるのアレだから逆にすべきか
ユーザー作るたびにデータベースそのものを作ってしまうかどうか＞とりあえずはやらない


■UI
トップ
ドキュメント
	エントリ
		ID
		タイトル
		(編集)
	サマリー
		年
		月
		日
		時
		タイトルディレクトリ
		タグ
	(新規登録)
公開機能
	リスト
		タグリスト
		タイトルリスト
	タイムライン
		最新
		特定期間
ログイン機能
	ダッシュボード アクティビティ
	設定


■予約ユーザー名
administrator adomin root ユーザーログインからはログイン不可


■プラグイン名前空間考
ドメイン/アプリ名/いろいろ
ドメイン/アプリ名/プラグイン/プラグイン作者ドメイン/プラグイン名/いろいろ
プラグイン作者ドメイン/アプリ名/プラグイン名/いろいろ

■実装メモ
まずは高速化は一切考えない
未来の自分が読みやすいであろうコードを書く
ガード節を先に書いて 正常処理をコンパクトに



■テストアプリケーション仕様
タグは半角スペース区切りで入力


■MVC
モデルはコントローラもビューも知らない webだろうがCUIだろうがネイティブアプリに移植したとしても変わらない設計をする
コントローラはモデルとビューを知っている actionを受け取ってモデルをコントロールして結果をviewに渡す
ビューはモデルを知っている コントローラは知らない モデルを受け取って出し分け


■コーディング規約
●Pythonソースコード
基本PEP8 http://oldriver.org/python/pep-0008j.html
プログラムのブロックインデントはタブ タブはプログラムのブロックインデントの段数を示すものであり幅とかクソ(個人的には半角2文字分をIDEに設定)
プログラムのブロックインデント以外でタブを使う場合はコード指定で
コメントはヘボい英語をちょろっと書いてその後に日本語で書く
ブロックコメントのなかでも先頭#つける grepした時コメント内とわかるように

●要検討
()内で折り返したときとかはプログラムのブロックのインデントの分タブ入れたあとスペースで位置調整する？
1つ目の値も(の次の行から書くなら全部タブでインデントすべきか
80文字制限ってクソいターミナル環境使うこと考慮してるよね どうしよ

●HTMLのインデントはどうしようね

●その他
段落に分ける
定数にコメントを付ける なぜその値なのか 画像の圧縮率で //肉眼ではこのくらいでイイ とか
関数のコメントにはできるだけ正確な動作の説明を書く 必要なら例を書く どう動くかだけでなく目的を書こう
IDEが補佐してくれるところはヨーダ記法しない 変化するのを左固定を右
do/whileはなるべく避ける
if 否定形 単純 目立つもの を先に
三項演算子を使うのは受取りパラメータ初期化くらい
ねすとをさけよう


●IDEのタスクに登録しとくやつ
TODO 順次やる
PENDING 検討項目
HACK あまりキレイじゃない解決策
CAUTION 注意 使い方などに問題のある部分
？ 既知のバグ？

●古いの
テーブル名 キャメルタイプ 頭文字大文字 ツリー的なのは キャメルタイプでつなげる User UserItem みたいな
n:nのリレーションだけもつやつのテーブル名 テーブル名_テーブル名 
マスタデータとトランザクションデータとログデータでDB分ける テーブル名にはその辺用のプレフィックスとか付けない
モデルのクラス名=テーブル名
クラス名の頭文字は大文字
インスタンス変数 = クラス名の頭文字を小文字に _objとか付けない (リレーションテーブルのモデルは作ってもコントローラからは使わずリレーションじゃないモデルの中にリレーション先のモデルオブジェクトを配列として持つためにモデル内で使う)
変数 キャメルタイプ 頭文字小文字 末尾数字可 スコープの大きい変数は説明的な名前にする スコープ小さいなら短くてもいい
サイズや時刻の変数 キャメルタイプ_単位
何か変更を加えた変数 キャメルタイプ_やったこと html→html_utf8 password→password_hash 変更前を示すのはあんまりやらない plaintext_password
ループイテレータ変数 複数配列入れ子にする時配列操作用ならijkじゃなく配列名のイニシャルi にする hoge[i] piyo[j] → hoge[hi] piyo[pi] もしくは hogeIndex
プライベート変数 先頭に"_"つける？
配列 変数名_array
メソッド mixedCase キャメルタイプ 頭文字小文字
get setメソッド 軽量アクセサ(PHP等プロパティのある言語ではあんまり使わなくなるはず)
定数 全部大文字_区切り

範囲指定の変数名 first last
排他的範囲指定の変数名 begin end 時間の範囲を指定するとき begin00:00～end01:00 で01:00は含めず 00:59 59秒までみたいな



■DB使い方
マスタDBはなるべく読み込みのみ
ログDBはなるべく書き込みのみ DBじゃなくても良いように作る トランザクションなしの書きっぱなし
トランザクションDBはなるべくトランザクション使う INODB前提でいいか

管理ツールからはそうでもない


■その他細かい仕様検討した結果
アプリケーションからコントローラをnewする方法検討
	ジェネレータ作る

queryに全部突っ込むか 共通クラスのSingletonをスタック出来るようにすべきか
	スタックはqueryの方でやってみた
	スタック機能を抽象化するならシングルトンとは別に作る

コントローラからビューをnewする方法検討
	検討
		ビュー名(画面名) モデル キューは暗黙的
		抽象コントローラにビュー生成メソッド？
		ビューファクトリーをCommonに置く？
	デザパタよく把握してないのでジェネレータって名前でInstance生成するやつ作る





■参考
●IDEのテンプレートの変数とか
http://www.jetbrains.com/idea/webhelp/file-and-code-templates.html
●テンプレートを便利に
http://d.hatena.ne.jp/absj31/20130318/1363619322
●科学技術計算
http://turbare.net/transl/scipy-lecture-notes/intro/

●インポート
別ディレクトリにあるファイルのインポート
http://kannokanno.hatenablog.com/entry/20130503/1367571825
パッケージ
http://docs.python.jp/2.5/tut/node8.html
動的
http://d.hatena.ne.jp/themorthem/20110125/1295937346
http://boli.boo.jp/boli_wiki/index.php?%E9%80%86%E5%BC%95%E3%81%8DPython%E3%83%A1%E3%83%A2%2F%E5%8B%95%E7%9A%84%E3%81%AB%E3%83%A2%E3%82%B8%E3%83%A5%E3%83%BC%E3%83%AB%E3%82%92import%E3%81%99%E3%82%8B



